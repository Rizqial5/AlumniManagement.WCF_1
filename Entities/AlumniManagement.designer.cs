#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlumniManagement.WCF.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KDP22")]
	public partial class AlumniManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertJobHistory(JobHistory instance);
    partial void UpdateJobHistory(JobHistory instance);
    partial void DeleteJobHistory(JobHistory instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertAlumniImage(AlumniImage instance);
    partial void UpdateAlumniImage(AlumniImage instance);
    partial void DeleteAlumniImage(AlumniImage instance);
    partial void InsertAlumniHobby(AlumniHobby instance);
    partial void UpdateAlumniHobby(AlumniHobby instance);
    partial void DeleteAlumniHobby(AlumniHobby instance);
    partial void InsertHobby(Hobby instance);
    partial void UpdateHobby(Hobby instance);
    partial void DeleteHobby(Hobby instance);
    partial void InsertJobSkill(JobSkill instance);
    partial void UpdateJobSkill(JobSkill instance);
    partial void DeleteJobSkill(JobSkill instance);
    partial void InsertJobAttachmentType(JobAttachmentType instance);
    partial void UpdateJobAttachmentType(JobAttachmentType instance);
    partial void DeleteJobAttachmentType(JobAttachmentType instance);
    partial void InsertJobCandidate(JobCandidate instance);
    partial void UpdateJobCandidate(JobCandidate instance);
    partial void DeleteJobCandidate(JobCandidate instance);
    partial void InsertAttachmentType(AttachmentType instance);
    partial void UpdateAttachmentType(AttachmentType instance);
    partial void DeleteAttachmentType(AttachmentType instance);
    partial void InsertEmploymentType(EmploymentType instance);
    partial void UpdateEmploymentType(EmploymentType instance);
    partial void DeleteEmploymentType(EmploymentType instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertJobPosting(JobPosting instance);
    partial void UpdateJobPosting(JobPosting instance);
    partial void DeleteJobPosting(JobPosting instance);
    partial void InsertJobAttachment(JobAttachment instance);
    partial void UpdateJobAttachment(JobAttachment instance);
    partial void DeleteJobAttachment(JobAttachment instance);
    partial void InsertAlumni(Alumni instance);
    partial void UpdateAlumni(Alumni instance);
    partial void DeleteAlumni(Alumni instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertPhotoAlbum(PhotoAlbum instance);
    partial void UpdatePhotoAlbum(PhotoAlbum instance);
    partial void DeletePhotoAlbum(PhotoAlbum instance);
    #endregion
		
		public AlumniManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlumniManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlumniManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AlumniManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Major> Majors
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculties
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<JobHistory> JobHistories
		{
			get
			{
				return this.GetTable<JobHistory>();
			}
		}
		
		public System.Data.Linq.Table<District> Districts
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<AlumniImage> AlumniImages
		{
			get
			{
				return this.GetTable<AlumniImage>();
			}
		}
		
		public System.Data.Linq.Table<AlumniHobby> AlumniHobbies
		{
			get
			{
				return this.GetTable<AlumniHobby>();
			}
		}
		
		public System.Data.Linq.Table<Hobby> Hobbies
		{
			get
			{
				return this.GetTable<Hobby>();
			}
		}
		
		public System.Data.Linq.Table<JobSkill> JobSkills
		{
			get
			{
				return this.GetTable<JobSkill>();
			}
		}
		
		public System.Data.Linq.Table<JobAttachmentType> JobAttachmentTypes
		{
			get
			{
				return this.GetTable<JobAttachmentType>();
			}
		}
		
		public System.Data.Linq.Table<JobCandidate> JobCandidates
		{
			get
			{
				return this.GetTable<JobCandidate>();
			}
		}
		
		public System.Data.Linq.Table<AttachmentType> AttachmentTypes
		{
			get
			{
				return this.GetTable<AttachmentType>();
			}
		}
		
		public System.Data.Linq.Table<EmploymentType> EmploymentTypes
		{
			get
			{
				return this.GetTable<EmploymentType>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<JobPosting> JobPostings
		{
			get
			{
				return this.GetTable<JobPosting>();
			}
		}
		
		public System.Data.Linq.Table<JobAttachment> JobAttachments
		{
			get
			{
				return this.GetTable<JobAttachment>();
			}
		}
		
		public System.Data.Linq.Table<Alumni> Alumnis
		{
			get
			{
				return this.GetTable<Alumni>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<PhotoAlbum> PhotoAlbums
		{
			get
			{
				return this.GetTable<PhotoAlbum>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MajorID;
		
		private string _MajorName;
		
		private System.Nullable<int> _FacultyID;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Alumni> _Alumnis;
		
		private EntityRef<Faculty> _Faculty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnMajorNameChanging(string value);
    partial void OnMajorNameChanged();
    partial void OnFacultyIDChanging(System.Nullable<int> value);
    partial void OnFacultyIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Major()
		{
			this._Alumnis = new EntitySet<Alumni>(new Action<Alumni>(this.attach_Alumnis), new Action<Alumni>(this.detach_Alumnis));
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MajorName
		{
			get
			{
				return this._MajorName;
			}
			set
			{
				if ((this._MajorName != value))
				{
					this.OnMajorNameChanging(value);
					this.SendPropertyChanging();
					this._MajorName = value;
					this.SendPropertyChanged("MajorName");
					this.OnMajorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", DbType="Int")]
		public System.Nullable<int> FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Alumni", Storage="_Alumnis", ThisKey="MajorID", OtherKey="MajorID")]
		public EntitySet<Alumni> Alumnis
		{
			get
			{
				return this._Alumnis;
			}
			set
			{
				this._Alumnis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Major", Storage="_Faculty", ThisKey="FacultyID", OtherKey="FacultyID", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Majors.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Majors.Add(this);
						this._FacultyID = value.FacultyID;
					}
					else
					{
						this._FacultyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alumnis(Alumni entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_Alumnis(Alumni entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FacultyID;
		
		private string _FacultyName;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Major> _Majors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacultyIDChanging(int value);
    partial void OnFacultyIDChanged();
    partial void OnFacultyNameChanging(string value);
    partial void OnFacultyNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Faculty()
		{
			this._Majors = new EntitySet<Major>(new Action<Major>(this.attach_Majors), new Action<Major>(this.detach_Majors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FacultyID
		{
			get
			{
				return this._FacultyID;
			}
			set
			{
				if ((this._FacultyID != value))
				{
					this.OnFacultyIDChanging(value);
					this.SendPropertyChanging();
					this._FacultyID = value;
					this.SendPropertyChanged("FacultyID");
					this.OnFacultyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FacultyName
		{
			get
			{
				return this._FacultyName;
			}
			set
			{
				if ((this._FacultyName != value))
				{
					this.OnFacultyNameChanging(value);
					this.SendPropertyChanging();
					this._FacultyName = value;
					this.SendPropertyChanged("FacultyName");
					this.OnFacultyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Major", Storage="_Majors", ThisKey="FacultyID", OtherKey="FacultyID")]
		public EntitySet<Major> Majors
		{
			get
			{
				return this._Majors;
			}
			set
			{
				this._Majors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Majors(Major entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Majors(Major entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobHistory")]
	public partial class JobHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobHistoryID;
		
		private System.Nullable<int> _AlumniID;
		
		private string _JobTitle;
		
		private string _Company;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Description;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<Alumni> _Alumni;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobHistoryIDChanging(int value);
    partial void OnJobHistoryIDChanged();
    partial void OnAlumniIDChanging(System.Nullable<int> value);
    partial void OnAlumniIDChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public JobHistory()
		{
			this._Alumni = default(EntityRef<Alumni>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobHistoryID
		{
			get
			{
				return this._JobHistoryID;
			}
			set
			{
				if ((this._JobHistoryID != value))
				{
					this.OnJobHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._JobHistoryID = value;
					this.SendPropertyChanged("JobHistoryID");
					this.OnJobHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlumniID", DbType="Int")]
		public System.Nullable<int> AlumniID
		{
			get
			{
				return this._AlumniID;
			}
			set
			{
				if ((this._AlumniID != value))
				{
					if (this._Alumni.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumniIDChanging(value);
					this.SendPropertyChanging();
					this._AlumniID = value;
					this.SendPropertyChanged("AlumniID");
					this.OnAlumniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(100)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(100)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_JobHistory", Storage="_Alumni", ThisKey="AlumniID", OtherKey="AlumniID", IsForeignKey=true)]
		public Alumni Alumni
		{
			get
			{
				return this._Alumni.Entity;
			}
			set
			{
				Alumni previousValue = this._Alumni.Entity;
				if (((previousValue != value) 
							|| (this._Alumni.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumni.Entity = null;
						previousValue.JobHistories.Remove(this);
					}
					this._Alumni.Entity = value;
					if ((value != null))
					{
						value.JobHistories.Add(this);
						this._AlumniID = value.AlumniID;
					}
					else
					{
						this._AlumniID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Alumni");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Districts")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DistrictID;
		
		private string _DistrictName;
		
		private int _StateID;
		
		private EntitySet<Alumni> _Alumnis;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictIDChanging(int value);
    partial void OnDistrictIDChanged();
    partial void OnDistrictNameChanging(string value);
    partial void OnDistrictNameChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    #endregion
		
		public District()
		{
			this._Alumnis = new EntitySet<Alumni>(new Action<Alumni>(this.attach_Alumnis), new Action<Alumni>(this.detach_Alumnis));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string DistrictName
		{
			get
			{
				return this._DistrictName;
			}
			set
			{
				if ((this._DistrictName != value))
				{
					this.OnDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._DistrictName = value;
					this.SendPropertyChanged("DistrictName");
					this.OnDistrictNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Alumni", Storage="_Alumnis", ThisKey="DistrictID", OtherKey="DistrictID")]
		public EntitySet<Alumni> Alumnis
		{
			get
			{
				return this._Alumnis;
			}
			set
			{
				this._Alumnis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_District", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Districts.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Districts.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alumnis(Alumni entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Alumnis(Alumni entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateID;
		
		private string _StateName;
		
		private EntitySet<District> _Districts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    #endregion
		
		public State()
		{
			this._Districts = new EntitySet<District>(new Action<District>(this.attach_Districts), new Action<District>(this.detach_Districts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_District", Storage="_Districts", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<District> Districts
		{
			get
			{
				return this._Districts;
			}
			set
			{
				this._Districts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlumniImages")]
	public partial class AlumniImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private int _AlumniID;
		
		private string _ImagePath;
		
		private System.DateTime _UploadDate;
		
		private string _FileName;
		
		private EntityRef<Alumni> _Alumni;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnAlumniIDChanging(int value);
    partial void OnAlumniIDChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnUploadDateChanging(System.DateTime value);
    partial void OnUploadDateChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public AlumniImage()
		{
			this._Alumni = default(EntityRef<Alumni>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlumniID", DbType="Int NOT NULL")]
		public int AlumniID
		{
			get
			{
				return this._AlumniID;
			}
			set
			{
				if ((this._AlumniID != value))
				{
					if (this._Alumni.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumniIDChanging(value);
					this.SendPropertyChanging();
					this._AlumniID = value;
					this.SendPropertyChanged("AlumniID");
					this.OnAlumniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_AlumniImage", Storage="_Alumni", ThisKey="AlumniID", OtherKey="AlumniID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Alumni Alumni
		{
			get
			{
				return this._Alumni.Entity;
			}
			set
			{
				Alumni previousValue = this._Alumni.Entity;
				if (((previousValue != value) 
							|| (this._Alumni.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumni.Entity = null;
						previousValue.AlumniImages.Remove(this);
					}
					this._Alumni.Entity = value;
					if ((value != null))
					{
						value.AlumniImages.Add(this);
						this._AlumniID = value.AlumniID;
					}
					else
					{
						this._AlumniID = default(int);
					}
					this.SendPropertyChanged("Alumni");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlumniHobbies")]
	public partial class AlumniHobby : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlumniID;
		
		private int _HobbyID;
		
		private EntityRef<Hobby> _Hobby;
		
		private EntityRef<Alumni> _Alumni;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlumniIDChanging(int value);
    partial void OnAlumniIDChanged();
    partial void OnHobbyIDChanging(int value);
    partial void OnHobbyIDChanged();
    #endregion
		
		public AlumniHobby()
		{
			this._Hobby = default(EntityRef<Hobby>);
			this._Alumni = default(EntityRef<Alumni>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlumniID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlumniID
		{
			get
			{
				return this._AlumniID;
			}
			set
			{
				if ((this._AlumniID != value))
				{
					if (this._Alumni.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumniIDChanging(value);
					this.SendPropertyChanging();
					this._AlumniID = value;
					this.SendPropertyChanged("AlumniID");
					this.OnAlumniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HobbyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HobbyID
		{
			get
			{
				return this._HobbyID;
			}
			set
			{
				if ((this._HobbyID != value))
				{
					if (this._Hobby.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHobbyIDChanging(value);
					this.SendPropertyChanging();
					this._HobbyID = value;
					this.SendPropertyChanged("HobbyID");
					this.OnHobbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hobby_AlumniHobby", Storage="_Hobby", ThisKey="HobbyID", OtherKey="HobbyID", IsForeignKey=true)]
		public Hobby Hobby
		{
			get
			{
				return this._Hobby.Entity;
			}
			set
			{
				Hobby previousValue = this._Hobby.Entity;
				if (((previousValue != value) 
							|| (this._Hobby.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hobby.Entity = null;
						previousValue.AlumniHobbies.Remove(this);
					}
					this._Hobby.Entity = value;
					if ((value != null))
					{
						value.AlumniHobbies.Add(this);
						this._HobbyID = value.HobbyID;
					}
					else
					{
						this._HobbyID = default(int);
					}
					this.SendPropertyChanged("Hobby");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_AlumniHobby", Storage="_Alumni", ThisKey="AlumniID", OtherKey="AlumniID", IsForeignKey=true)]
		public Alumni Alumni
		{
			get
			{
				return this._Alumni.Entity;
			}
			set
			{
				Alumni previousValue = this._Alumni.Entity;
				if (((previousValue != value) 
							|| (this._Alumni.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumni.Entity = null;
						previousValue.AlumniHobbies.Remove(this);
					}
					this._Alumni.Entity = value;
					if ((value != null))
					{
						value.AlumniHobbies.Add(this);
						this._AlumniID = value.AlumniID;
					}
					else
					{
						this._AlumniID = default(int);
					}
					this.SendPropertyChanged("Alumni");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hobbies")]
	public partial class Hobby : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HobbyID;
		
		private string _Name;
		
		private EntitySet<AlumniHobby> _AlumniHobbies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHobbyIDChanging(int value);
    partial void OnHobbyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Hobby()
		{
			this._AlumniHobbies = new EntitySet<AlumniHobby>(new Action<AlumniHobby>(this.attach_AlumniHobbies), new Action<AlumniHobby>(this.detach_AlumniHobbies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HobbyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HobbyID
		{
			get
			{
				return this._HobbyID;
			}
			set
			{
				if ((this._HobbyID != value))
				{
					this.OnHobbyIDChanging(value);
					this.SendPropertyChanging();
					this._HobbyID = value;
					this.SendPropertyChanged("HobbyID");
					this.OnHobbyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hobby_AlumniHobby", Storage="_AlumniHobbies", ThisKey="HobbyID", OtherKey="HobbyID")]
		public EntitySet<AlumniHobby> AlumniHobbies
		{
			get
			{
				return this._AlumniHobbies;
			}
			set
			{
				this._AlumniHobbies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlumniHobbies(AlumniHobby entity)
		{
			this.SendPropertyChanging();
			entity.Hobby = this;
		}
		
		private void detach_AlumniHobbies(AlumniHobby entity)
		{
			this.SendPropertyChanging();
			entity.Hobby = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobSkill")]
	public partial class JobSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobID;
		
		private byte _SkillID;
		
		private EntityRef<Skill> _Skill;
		
		private EntityRef<JobPosting> _JobPosting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnSkillIDChanging(byte value);
    partial void OnSkillIDChanged();
    #endregion
		
		public JobSkill()
		{
			this._Skill = default(EntityRef<Skill>);
			this._JobPosting = default(EntityRef<JobPosting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._JobPosting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_JobSkill", Storage="_Skill", ThisKey="SkillID", OtherKey="SkillID", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.JobSkills.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.JobSkills.Add(this);
						this._SkillID = value.SkillID;
					}
					else
					{
						this._SkillID = default(byte);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobSkill", Storage="_JobPosting", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public JobPosting JobPosting
		{
			get
			{
				return this._JobPosting.Entity;
			}
			set
			{
				JobPosting previousValue = this._JobPosting.Entity;
				if (((previousValue != value) 
							|| (this._JobPosting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobPosting.Entity = null;
						previousValue.JobSkills.Remove(this);
					}
					this._JobPosting.Entity = value;
					if ((value != null))
					{
						value.JobSkills.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("JobPosting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobAttachmentType")]
	public partial class JobAttachmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobID;
		
		private byte _AttachmentTypeID;
		
		private EntityRef<AttachmentType> _AttachmentType;
		
		private EntityRef<JobPosting> _JobPosting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnAttachmentTypeIDChanging(byte value);
    partial void OnAttachmentTypeIDChanged();
    #endregion
		
		public JobAttachmentType()
		{
			this._AttachmentType = default(EntityRef<AttachmentType>);
			this._JobPosting = default(EntityRef<JobPosting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._JobPosting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentTypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte AttachmentTypeID
		{
			get
			{
				return this._AttachmentTypeID;
			}
			set
			{
				if ((this._AttachmentTypeID != value))
				{
					if (this._AttachmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttachmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentTypeID = value;
					this.SendPropertyChanged("AttachmentTypeID");
					this.OnAttachmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttachmentType_JobAttachmentType", Storage="_AttachmentType", ThisKey="AttachmentTypeID", OtherKey="AttachmentTypeID", IsForeignKey=true)]
		public AttachmentType AttachmentType
		{
			get
			{
				return this._AttachmentType.Entity;
			}
			set
			{
				AttachmentType previousValue = this._AttachmentType.Entity;
				if (((previousValue != value) 
							|| (this._AttachmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttachmentType.Entity = null;
						previousValue.JobAttachmentTypes.Remove(this);
					}
					this._AttachmentType.Entity = value;
					if ((value != null))
					{
						value.JobAttachmentTypes.Add(this);
						this._AttachmentTypeID = value.AttachmentTypeID;
					}
					else
					{
						this._AttachmentTypeID = default(byte);
					}
					this.SendPropertyChanged("AttachmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobAttachmentType", Storage="_JobPosting", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public JobPosting JobPosting
		{
			get
			{
				return this._JobPosting.Entity;
			}
			set
			{
				JobPosting previousValue = this._JobPosting.Entity;
				if (((previousValue != value) 
							|| (this._JobPosting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobPosting.Entity = null;
						previousValue.JobAttachmentTypes.Remove(this);
					}
					this._JobPosting.Entity = value;
					if ((value != null))
					{
						value.JobAttachmentTypes.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("JobPosting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobCandidate")]
	public partial class JobCandidate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlumniID;
		
		private System.Guid _JobID;
		
		private System.DateTime _ApplyDate;
		
		private EntityRef<JobPosting> _JobPosting;
		
		private EntityRef<Alumni> _Alumni;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlumniIDChanging(int value);
    partial void OnAlumniIDChanged();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnApplyDateChanging(System.DateTime value);
    partial void OnApplyDateChanged();
    #endregion
		
		public JobCandidate()
		{
			this._JobPosting = default(EntityRef<JobPosting>);
			this._Alumni = default(EntityRef<Alumni>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlumniID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AlumniID
		{
			get
			{
				return this._AlumniID;
			}
			set
			{
				if ((this._AlumniID != value))
				{
					if (this._Alumni.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumniIDChanging(value);
					this.SendPropertyChanging();
					this._AlumniID = value;
					this.SendPropertyChanged("AlumniID");
					this.OnAlumniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._JobPosting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplyDate", DbType="DateTime NOT NULL")]
		public System.DateTime ApplyDate
		{
			get
			{
				return this._ApplyDate;
			}
			set
			{
				if ((this._ApplyDate != value))
				{
					this.OnApplyDateChanging(value);
					this.SendPropertyChanging();
					this._ApplyDate = value;
					this.SendPropertyChanged("ApplyDate");
					this.OnApplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobCandidate", Storage="_JobPosting", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public JobPosting JobPosting
		{
			get
			{
				return this._JobPosting.Entity;
			}
			set
			{
				JobPosting previousValue = this._JobPosting.Entity;
				if (((previousValue != value) 
							|| (this._JobPosting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobPosting.Entity = null;
						previousValue.JobCandidates.Remove(this);
					}
					this._JobPosting.Entity = value;
					if ((value != null))
					{
						value.JobCandidates.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("JobPosting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_JobCandidate", Storage="_Alumni", ThisKey="AlumniID", OtherKey="AlumniID", IsForeignKey=true)]
		public Alumni Alumni
		{
			get
			{
				return this._Alumni.Entity;
			}
			set
			{
				Alumni previousValue = this._Alumni.Entity;
				if (((previousValue != value) 
							|| (this._Alumni.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumni.Entity = null;
						previousValue.JobCandidates.Remove(this);
					}
					this._Alumni.Entity = value;
					if ((value != null))
					{
						value.JobCandidates.Add(this);
						this._AlumniID = value.AlumniID;
					}
					else
					{
						this._AlumniID = default(int);
					}
					this.SendPropertyChanged("Alumni");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttachmentType")]
	public partial class AttachmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _AttachmentTypeID;
		
		private string _Name;
		
		private EntitySet<JobAttachmentType> _JobAttachmentTypes;
		
		private EntitySet<JobAttachment> _JobAttachments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentTypeIDChanging(byte value);
    partial void OnAttachmentTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AttachmentType()
		{
			this._JobAttachmentTypes = new EntitySet<JobAttachmentType>(new Action<JobAttachmentType>(this.attach_JobAttachmentTypes), new Action<JobAttachmentType>(this.detach_JobAttachmentTypes));
			this._JobAttachments = new EntitySet<JobAttachment>(new Action<JobAttachment>(this.attach_JobAttachments), new Action<JobAttachment>(this.detach_JobAttachments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentTypeID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte AttachmentTypeID
		{
			get
			{
				return this._AttachmentTypeID;
			}
			set
			{
				if ((this._AttachmentTypeID != value))
				{
					this.OnAttachmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentTypeID = value;
					this.SendPropertyChanged("AttachmentTypeID");
					this.OnAttachmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttachmentType_JobAttachmentType", Storage="_JobAttachmentTypes", ThisKey="AttachmentTypeID", OtherKey="AttachmentTypeID")]
		public EntitySet<JobAttachmentType> JobAttachmentTypes
		{
			get
			{
				return this._JobAttachmentTypes;
			}
			set
			{
				this._JobAttachmentTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttachmentType_JobAttachment", Storage="_JobAttachments", ThisKey="AttachmentTypeID", OtherKey="AttachmentTypeID")]
		public EntitySet<JobAttachment> JobAttachments
		{
			get
			{
				return this._JobAttachments;
			}
			set
			{
				this._JobAttachments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobAttachmentTypes(JobAttachmentType entity)
		{
			this.SendPropertyChanging();
			entity.AttachmentType = this;
		}
		
		private void detach_JobAttachmentTypes(JobAttachmentType entity)
		{
			this.SendPropertyChanging();
			entity.AttachmentType = null;
		}
		
		private void attach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.AttachmentType = this;
		}
		
		private void detach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.AttachmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmploymentType")]
	public partial class EmploymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _EmploymentTypeID;
		
		private string _Name;
		
		private EntitySet<JobPosting> _JobPostings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmploymentTypeIDChanging(byte value);
    partial void OnEmploymentTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EmploymentType()
		{
			this._JobPostings = new EntitySet<JobPosting>(new Action<JobPosting>(this.attach_JobPostings), new Action<JobPosting>(this.detach_JobPostings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmploymentTypeID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte EmploymentTypeID
		{
			get
			{
				return this._EmploymentTypeID;
			}
			set
			{
				if ((this._EmploymentTypeID != value))
				{
					this.OnEmploymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmploymentTypeID = value;
					this.SendPropertyChanged("EmploymentTypeID");
					this.OnEmploymentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmploymentType_JobPosting", Storage="_JobPostings", ThisKey="EmploymentTypeID", OtherKey="EmploymentTypeID")]
		public EntitySet<JobPosting> JobPostings
		{
			get
			{
				return this._JobPostings;
			}
			set
			{
				this._JobPostings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobPostings(JobPosting entity)
		{
			this.SendPropertyChanging();
			entity.EmploymentType = this;
		}
		
		private void detach_JobPostings(JobPosting entity)
		{
			this.SendPropertyChanging();
			entity.EmploymentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skills")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _SkillID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private bool _IsActive;
		
		private EntitySet<JobSkill> _JobSkills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSkillIDChanging(byte value);
    partial void OnSkillIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Skill()
		{
			this._JobSkills = new EntitySet<JobSkill>(new Action<JobSkill>(this.attach_JobSkills), new Action<JobSkill>(this.detach_JobSkills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_JobSkill", Storage="_JobSkills", ThisKey="SkillID", OtherKey="SkillID")]
		public EntitySet<JobSkill> JobSkills
		{
			get
			{
				return this._JobSkills;
			}
			set
			{
				this._JobSkills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobSkills(JobSkill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_JobSkills(JobSkill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobPosting")]
	public partial class JobPosting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobID;
		
		private string _Title;
		
		private string _Company;
		
		private string _JobDescription;
		
		private byte _EmploymentTypeID;
		
		private byte _MinimumExperience;
		
		private System.DateTime _ModifiedDate;
		
		private bool _IsActive;
		
		private bool _IsClosed;
		
		private EntitySet<JobSkill> _JobSkills;
		
		private EntitySet<JobAttachmentType> _JobAttachmentTypes;
		
		private EntitySet<JobCandidate> _JobCandidates;
		
		private EntitySet<JobAttachment> _JobAttachments;
		
		private EntityRef<EmploymentType> _EmploymentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnJobDescriptionChanging(string value);
    partial void OnJobDescriptionChanged();
    partial void OnEmploymentTypeIDChanging(byte value);
    partial void OnEmploymentTypeIDChanged();
    partial void OnMinimumExperienceChanging(byte value);
    partial void OnMinimumExperienceChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    #endregion
		
		public JobPosting()
		{
			this._JobSkills = new EntitySet<JobSkill>(new Action<JobSkill>(this.attach_JobSkills), new Action<JobSkill>(this.detach_JobSkills));
			this._JobAttachmentTypes = new EntitySet<JobAttachmentType>(new Action<JobAttachmentType>(this.attach_JobAttachmentTypes), new Action<JobAttachmentType>(this.detach_JobAttachmentTypes));
			this._JobCandidates = new EntitySet<JobCandidate>(new Action<JobCandidate>(this.attach_JobCandidates), new Action<JobCandidate>(this.detach_JobCandidates));
			this._JobAttachments = new EntitySet<JobAttachment>(new Action<JobAttachment>(this.attach_JobAttachments), new Action<JobAttachment>(this.detach_JobAttachments));
			this._EmploymentType = default(EntityRef<EmploymentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescription", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string JobDescription
		{
			get
			{
				return this._JobDescription;
			}
			set
			{
				if ((this._JobDescription != value))
				{
					this.OnJobDescriptionChanging(value);
					this.SendPropertyChanging();
					this._JobDescription = value;
					this.SendPropertyChanged("JobDescription");
					this.OnJobDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmploymentTypeID", DbType="TinyInt NOT NULL")]
		public byte EmploymentTypeID
		{
			get
			{
				return this._EmploymentTypeID;
			}
			set
			{
				if ((this._EmploymentTypeID != value))
				{
					if (this._EmploymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmploymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EmploymentTypeID = value;
					this.SendPropertyChanged("EmploymentTypeID");
					this.OnEmploymentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinimumExperience", DbType="TinyInt NOT NULL")]
		public byte MinimumExperience
		{
			get
			{
				return this._MinimumExperience;
			}
			set
			{
				if ((this._MinimumExperience != value))
				{
					this.OnMinimumExperienceChanging(value);
					this.SendPropertyChanging();
					this._MinimumExperience = value;
					this.SendPropertyChanged("MinimumExperience");
					this.OnMinimumExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobSkill", Storage="_JobSkills", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobSkill> JobSkills
		{
			get
			{
				return this._JobSkills;
			}
			set
			{
				this._JobSkills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobAttachmentType", Storage="_JobAttachmentTypes", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobAttachmentType> JobAttachmentTypes
		{
			get
			{
				return this._JobAttachmentTypes;
			}
			set
			{
				this._JobAttachmentTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobCandidate", Storage="_JobCandidates", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobCandidate> JobCandidates
		{
			get
			{
				return this._JobCandidates;
			}
			set
			{
				this._JobCandidates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobAttachment", Storage="_JobAttachments", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<JobAttachment> JobAttachments
		{
			get
			{
				return this._JobAttachments;
			}
			set
			{
				this._JobAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmploymentType_JobPosting", Storage="_EmploymentType", ThisKey="EmploymentTypeID", OtherKey="EmploymentTypeID", IsForeignKey=true)]
		public EmploymentType EmploymentType
		{
			get
			{
				return this._EmploymentType.Entity;
			}
			set
			{
				EmploymentType previousValue = this._EmploymentType.Entity;
				if (((previousValue != value) 
							|| (this._EmploymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmploymentType.Entity = null;
						previousValue.JobPostings.Remove(this);
					}
					this._EmploymentType.Entity = value;
					if ((value != null))
					{
						value.JobPostings.Add(this);
						this._EmploymentTypeID = value.EmploymentTypeID;
					}
					else
					{
						this._EmploymentTypeID = default(byte);
					}
					this.SendPropertyChanged("EmploymentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobSkills(JobSkill entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = this;
		}
		
		private void detach_JobSkills(JobSkill entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = null;
		}
		
		private void attach_JobAttachmentTypes(JobAttachmentType entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = this;
		}
		
		private void detach_JobAttachmentTypes(JobAttachmentType entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = null;
		}
		
		private void attach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = this;
		}
		
		private void detach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = null;
		}
		
		private void attach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = this;
		}
		
		private void detach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.JobPosting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobAttachment")]
	public partial class JobAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttachmentID;
		
		private System.Guid _JobID;
		
		private int _AlumniID;
		
		private byte _AttachmentTypeID;
		
		private string _FilePath;
		
		private string _FileName;
		
		private EntityRef<AttachmentType> _AttachmentType;
		
		private EntityRef<JobPosting> _JobPosting;
		
		private EntityRef<Alumni> _Alumni;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttachmentIDChanging(int value);
    partial void OnAttachmentIDChanged();
    partial void OnJobIDChanging(System.Guid value);
    partial void OnJobIDChanged();
    partial void OnAlumniIDChanging(int value);
    partial void OnAlumniIDChanged();
    partial void OnAttachmentTypeIDChanging(byte value);
    partial void OnAttachmentTypeIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public JobAttachment()
		{
			this._AttachmentType = default(EntityRef<AttachmentType>);
			this._JobPosting = default(EntityRef<JobPosting>);
			this._Alumni = default(EntityRef<Alumni>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttachmentID
		{
			get
			{
				return this._AttachmentID;
			}
			set
			{
				if ((this._AttachmentID != value))
				{
					this.OnAttachmentIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentID = value;
					this.SendPropertyChanged("AttachmentID");
					this.OnAttachmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._JobPosting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlumniID", DbType="Int NOT NULL")]
		public int AlumniID
		{
			get
			{
				return this._AlumniID;
			}
			set
			{
				if ((this._AlumniID != value))
				{
					if (this._Alumni.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlumniIDChanging(value);
					this.SendPropertyChanging();
					this._AlumniID = value;
					this.SendPropertyChanged("AlumniID");
					this.OnAlumniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentTypeID", DbType="TinyInt NOT NULL")]
		public byte AttachmentTypeID
		{
			get
			{
				return this._AttachmentTypeID;
			}
			set
			{
				if ((this._AttachmentTypeID != value))
				{
					if (this._AttachmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttachmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttachmentTypeID = value;
					this.SendPropertyChanged("AttachmentTypeID");
					this.OnAttachmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttachmentType_JobAttachment", Storage="_AttachmentType", ThisKey="AttachmentTypeID", OtherKey="AttachmentTypeID", IsForeignKey=true)]
		public AttachmentType AttachmentType
		{
			get
			{
				return this._AttachmentType.Entity;
			}
			set
			{
				AttachmentType previousValue = this._AttachmentType.Entity;
				if (((previousValue != value) 
							|| (this._AttachmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttachmentType.Entity = null;
						previousValue.JobAttachments.Remove(this);
					}
					this._AttachmentType.Entity = value;
					if ((value != null))
					{
						value.JobAttachments.Add(this);
						this._AttachmentTypeID = value.AttachmentTypeID;
					}
					else
					{
						this._AttachmentTypeID = default(byte);
					}
					this.SendPropertyChanged("AttachmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPosting_JobAttachment", Storage="_JobPosting", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public JobPosting JobPosting
		{
			get
			{
				return this._JobPosting.Entity;
			}
			set
			{
				JobPosting previousValue = this._JobPosting.Entity;
				if (((previousValue != value) 
							|| (this._JobPosting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobPosting.Entity = null;
						previousValue.JobAttachments.Remove(this);
					}
					this._JobPosting.Entity = value;
					if ((value != null))
					{
						value.JobAttachments.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(System.Guid);
					}
					this.SendPropertyChanged("JobPosting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_JobAttachment", Storage="_Alumni", ThisKey="AlumniID", OtherKey="AlumniID", IsForeignKey=true)]
		public Alumni Alumni
		{
			get
			{
				return this._Alumni.Entity;
			}
			set
			{
				Alumni previousValue = this._Alumni.Entity;
				if (((previousValue != value) 
							|| (this._Alumni.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alumni.Entity = null;
						previousValue.JobAttachments.Remove(this);
					}
					this._Alumni.Entity = value;
					if ((value != null))
					{
						value.JobAttachments.Add(this);
						this._AlumniID = value.AlumniID;
					}
					else
					{
						this._AlumniID = default(int);
					}
					this.SendPropertyChanged("Alumni");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alumni")]
	public partial class Alumni : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlumniID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _MobileNumber;
		
		private string _Address;
		
		private System.Nullable<int> _DistrictID;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private System.Nullable<int> _GraduationYear;
		
		private string _Degree;
		
		private System.Nullable<int> _MajorID;
		
		private string _LinkedInProfile;
		
		private System.DateTime _ModifiedDate;
		
		private string _PhotoPath;
		
		private string _PhotoName;
		
		private string _Gender;
		
		private EntitySet<JobHistory> _JobHistories;
		
		private EntitySet<AlumniImage> _AlumniImages;
		
		private EntitySet<AlumniHobby> _AlumniHobbies;
		
		private EntitySet<JobCandidate> _JobCandidates;
		
		private EntitySet<JobAttachment> _JobAttachments;
		
		private EntityRef<District> _District;
		
		private EntityRef<Major> _Major;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlumniIDChanging(int value);
    partial void OnAlumniIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMobileNumberChanging(string value);
    partial void OnMobileNumberChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDistrictIDChanging(System.Nullable<int> value);
    partial void OnDistrictIDChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGraduationYearChanging(System.Nullable<int> value);
    partial void OnGraduationYearChanged();
    partial void OnDegreeChanging(string value);
    partial void OnDegreeChanged();
    partial void OnMajorIDChanging(System.Nullable<int> value);
    partial void OnMajorIDChanged();
    partial void OnLinkedInProfileChanging(string value);
    partial void OnLinkedInProfileChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnPhotoPathChanging(string value);
    partial void OnPhotoPathChanged();
    partial void OnPhotoNameChanging(string value);
    partial void OnPhotoNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public Alumni()
		{
			this._JobHistories = new EntitySet<JobHistory>(new Action<JobHistory>(this.attach_JobHistories), new Action<JobHistory>(this.detach_JobHistories));
			this._AlumniImages = new EntitySet<AlumniImage>(new Action<AlumniImage>(this.attach_AlumniImages), new Action<AlumniImage>(this.detach_AlumniImages));
			this._AlumniHobbies = new EntitySet<AlumniHobby>(new Action<AlumniHobby>(this.attach_AlumniHobbies), new Action<AlumniHobby>(this.detach_AlumniHobbies));
			this._JobCandidates = new EntitySet<JobCandidate>(new Action<JobCandidate>(this.attach_JobCandidates), new Action<JobCandidate>(this.detach_JobCandidates));
			this._JobAttachments = new EntitySet<JobAttachment>(new Action<JobAttachment>(this.attach_JobAttachments), new Action<JobAttachment>(this.detach_JobAttachments));
			this._District = default(EntityRef<District>);
			this._Major = default(EntityRef<Major>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlumniID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlumniID
		{
			get
			{
				return this._AlumniID;
			}
			set
			{
				if ((this._AlumniID != value))
				{
					this.OnAlumniIDChanging(value);
					this.SendPropertyChanging();
					this._AlumniID = value;
					this.SendPropertyChanged("AlumniID");
					this.OnAlumniIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="NVarChar(15)")]
		public string MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", DbType="Int")]
		public System.Nullable<int> DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GraduationYear", DbType="Int")]
		public System.Nullable<int> GraduationYear
		{
			get
			{
				return this._GraduationYear;
			}
			set
			{
				if ((this._GraduationYear != value))
				{
					this.OnGraduationYearChanging(value);
					this.SendPropertyChanging();
					this._GraduationYear = value;
					this.SendPropertyChanged("GraduationYear");
					this.OnGraduationYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree", DbType="NVarChar(100)")]
		public string Degree
		{
			get
			{
				return this._Degree;
			}
			set
			{
				if ((this._Degree != value))
				{
					this.OnDegreeChanging(value);
					this.SendPropertyChanging();
					this._Degree = value;
					this.SendPropertyChanged("Degree");
					this.OnDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", DbType="Int")]
		public System.Nullable<int> MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedInProfile", DbType="NVarChar(255)")]
		public string LinkedInProfile
		{
			get
			{
				return this._LinkedInProfile;
			}
			set
			{
				if ((this._LinkedInProfile != value))
				{
					this.OnLinkedInProfileChanging(value);
					this.SendPropertyChanging();
					this._LinkedInProfile = value;
					this.SendPropertyChanged("LinkedInProfile");
					this.OnLinkedInProfileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoPath", DbType="VarChar(255)")]
		public string PhotoPath
		{
			get
			{
				return this._PhotoPath;
			}
			set
			{
				if ((this._PhotoPath != value))
				{
					this.OnPhotoPathChanging(value);
					this.SendPropertyChanging();
					this._PhotoPath = value;
					this.SendPropertyChanged("PhotoPath");
					this.OnPhotoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoName", DbType="VarChar(50)")]
		public string PhotoName
		{
			get
			{
				return this._PhotoName;
			}
			set
			{
				if ((this._PhotoName != value))
				{
					this.OnPhotoNameChanging(value);
					this.SendPropertyChanging();
					this._PhotoName = value;
					this.SendPropertyChanged("PhotoName");
					this.OnPhotoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_JobHistory", Storage="_JobHistories", ThisKey="AlumniID", OtherKey="AlumniID")]
		public EntitySet<JobHistory> JobHistories
		{
			get
			{
				return this._JobHistories;
			}
			set
			{
				this._JobHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_AlumniImage", Storage="_AlumniImages", ThisKey="AlumniID", OtherKey="AlumniID")]
		public EntitySet<AlumniImage> AlumniImages
		{
			get
			{
				return this._AlumniImages;
			}
			set
			{
				this._AlumniImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_AlumniHobby", Storage="_AlumniHobbies", ThisKey="AlumniID", OtherKey="AlumniID")]
		public EntitySet<AlumniHobby> AlumniHobbies
		{
			get
			{
				return this._AlumniHobbies;
			}
			set
			{
				this._AlumniHobbies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_JobCandidate", Storage="_JobCandidates", ThisKey="AlumniID", OtherKey="AlumniID")]
		public EntitySet<JobCandidate> JobCandidates
		{
			get
			{
				return this._JobCandidates;
			}
			set
			{
				this._JobCandidates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alumni_JobAttachment", Storage="_JobAttachments", ThisKey="AlumniID", OtherKey="AlumniID")]
		public EntitySet<JobAttachment> JobAttachments
		{
			get
			{
				return this._JobAttachments;
			}
			set
			{
				this._JobAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Alumni", Storage="_District", ThisKey="DistrictID", OtherKey="DistrictID", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Alumnis.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Alumnis.Add(this);
						this._DistrictID = value.DistrictID;
					}
					else
					{
						this._DistrictID = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Alumni", Storage="_Major", ThisKey="MajorID", OtherKey="MajorID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.Alumnis.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.Alumnis.Add(this);
						this._MajorID = value.MajorID;
					}
					else
					{
						this._MajorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobHistories(JobHistory entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = this;
		}
		
		private void detach_JobHistories(JobHistory entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = null;
		}
		
		private void attach_AlumniImages(AlumniImage entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = this;
		}
		
		private void detach_AlumniImages(AlumniImage entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = null;
		}
		
		private void attach_AlumniHobbies(AlumniHobby entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = this;
		}
		
		private void detach_AlumniHobbies(AlumniHobby entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = null;
		}
		
		private void attach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = this;
		}
		
		private void detach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = null;
		}
		
		private void attach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = this;
		}
		
		private void detach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Alumni = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _Title;
		
		private string _Description;
		
		private string _EventImagePath;
		
		private string _EventImageName;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private bool _IsClosed;
		
		private System.DateTime _ModifiedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEventImagePathChanging(string value);
    partial void OnEventImagePathChanged();
    partial void OnEventImageNameChanging(string value);
    partial void OnEventImageNameChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIsClosedChanging(bool value);
    partial void OnIsClosedChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventImagePath", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string EventImagePath
		{
			get
			{
				return this._EventImagePath;
			}
			set
			{
				if ((this._EventImagePath != value))
				{
					this.OnEventImagePathChanging(value);
					this.SendPropertyChanging();
					this._EventImagePath = value;
					this.SendPropertyChanged("EventImagePath");
					this.OnEventImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventImageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EventImageName
		{
			get
			{
				return this._EventImageName;
			}
			set
			{
				if ((this._EventImageName != value))
				{
					this.OnEventImageNameChanging(value);
					this.SendPropertyChanging();
					this._EventImageName = value;
					this.SendPropertyChanged("EventImageName");
					this.OnEventImageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsClosed", DbType="Bit NOT NULL")]
		public bool IsClosed
		{
			get
			{
				return this._IsClosed;
			}
			set
			{
				if ((this._IsClosed != value))
				{
					this.OnIsClosedChanging(value);
					this.SendPropertyChanging();
					this._IsClosed = value;
					this.SendPropertyChanged("IsClosed");
					this.OnIsClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photos")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhotoID;
		
		private int _AlbumID;
		
		private string _PhotoPath;
		
		private string _PhotoFilleName;
		
		private System.Nullable<bool> _IsPhotoAlbumThumbnail;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<PhotoAlbum> _PhotoAlbum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoIDChanging(int value);
    partial void OnPhotoIDChanged();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    partial void OnPhotoPathChanging(string value);
    partial void OnPhotoPathChanged();
    partial void OnPhotoFilleNameChanging(string value);
    partial void OnPhotoFilleNameChanged();
    partial void OnIsPhotoAlbumThumbnailChanging(System.Nullable<bool> value);
    partial void OnIsPhotoAlbumThumbnailChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Photo()
		{
			this._PhotoAlbum = default(EntityRef<PhotoAlbum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PhotoID
		{
			get
			{
				return this._PhotoID;
			}
			set
			{
				if ((this._PhotoID != value))
				{
					this.OnPhotoIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoID = value;
					this.SendPropertyChanged("PhotoID");
					this.OnPhotoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", DbType="Int NOT NULL")]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					if (this._PhotoAlbum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoPath", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string PhotoPath
		{
			get
			{
				return this._PhotoPath;
			}
			set
			{
				if ((this._PhotoPath != value))
				{
					this.OnPhotoPathChanging(value);
					this.SendPropertyChanging();
					this._PhotoPath = value;
					this.SendPropertyChanged("PhotoPath");
					this.OnPhotoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoFilleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhotoFilleName
		{
			get
			{
				return this._PhotoFilleName;
			}
			set
			{
				if ((this._PhotoFilleName != value))
				{
					this.OnPhotoFilleNameChanging(value);
					this.SendPropertyChanging();
					this._PhotoFilleName = value;
					this.SendPropertyChanged("PhotoFilleName");
					this.OnPhotoFilleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPhotoAlbumThumbnail", DbType="Bit")]
		public System.Nullable<bool> IsPhotoAlbumThumbnail
		{
			get
			{
				return this._IsPhotoAlbumThumbnail;
			}
			set
			{
				if ((this._IsPhotoAlbumThumbnail != value))
				{
					this.OnIsPhotoAlbumThumbnailChanging(value);
					this.SendPropertyChanging();
					this._IsPhotoAlbumThumbnail = value;
					this.SendPropertyChanged("IsPhotoAlbumThumbnail");
					this.OnIsPhotoAlbumThumbnailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_Photo", Storage="_PhotoAlbum", ThisKey="AlbumID", OtherKey="AlbumID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PhotoAlbum PhotoAlbum
		{
			get
			{
				return this._PhotoAlbum.Entity;
			}
			set
			{
				PhotoAlbum previousValue = this._PhotoAlbum.Entity;
				if (((previousValue != value) 
							|| (this._PhotoAlbum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhotoAlbum.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._PhotoAlbum.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._AlbumID = value.AlbumID;
					}
					else
					{
						this._AlbumID = default(int);
					}
					this.SendPropertyChanged("PhotoAlbum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoAlbum")]
	public partial class PhotoAlbum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlbumID;
		
		private string _AlbumName;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<Photo> _Photos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlbumIDChanging(int value);
    partial void OnAlbumIDChanged();
    partial void OnAlbumNameChanging(string value);
    partial void OnAlbumNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public PhotoAlbum()
		{
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlbumID
		{
			get
			{
				return this._AlbumID;
			}
			set
			{
				if ((this._AlbumID != value))
				{
					this.OnAlbumIDChanging(value);
					this.SendPropertyChanging();
					this._AlbumID = value;
					this.SendPropertyChanged("AlbumID");
					this.OnAlbumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AlbumName
		{
			get
			{
				return this._AlbumName;
			}
			set
			{
				if ((this._AlbumName != value))
				{
					this.OnAlbumNameChanging(value);
					this.SendPropertyChanging();
					this._AlbumName = value;
					this.SendPropertyChanged("AlbumName");
					this.OnAlbumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoAlbum_Photo", Storage="_Photos", ThisKey="AlbumID", OtherKey="AlbumID")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.PhotoAlbum = null;
		}
	}
}
#pragma warning restore 1591
